// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: wacker.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wacker_Run_FullMethodName     = "/wacker.Wacker/Run"
	Wacker_Serve_FullMethodName   = "/wacker.Wacker/Serve"
	Wacker_List_FullMethodName    = "/wacker.Wacker/List"
	Wacker_Stop_FullMethodName    = "/wacker.Wacker/Stop"
	Wacker_Restart_FullMethodName = "/wacker.Wacker/Restart"
	Wacker_Delete_FullMethodName  = "/wacker.Wacker/Delete"
	Wacker_Logs_FullMethodName    = "/wacker.Wacker/Logs"
)

// WackerClient is the client API for Wacker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WackerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*ProgramResponse, error)
	Serve(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ProgramResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Wacker_LogsClient, error)
}

type wackerClient struct {
	cc grpc.ClientConnInterface
}

func NewWackerClient(cc grpc.ClientConnInterface) WackerClient {
	return &wackerClient{cc}
}

func (c *wackerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*ProgramResponse, error) {
	out := new(ProgramResponse)
	err := c.cc.Invoke(ctx, Wacker_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) Serve(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ProgramResponse, error) {
	out := new(ProgramResponse)
	err := c.cc.Invoke(ctx, Wacker_Serve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Wacker_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wacker_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wacker_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wacker_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackerClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Wacker_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wacker_ServiceDesc.Streams[0], Wacker_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wackerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wacker_LogsClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type wackerLogsClient struct {
	grpc.ClientStream
}

func (x *wackerLogsClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WackerServer is the server API for Wacker service.
// All implementations must embed UnimplementedWackerServer
// for forward compatibility
type WackerServer interface {
	Run(context.Context, *RunRequest) (*ProgramResponse, error)
	Serve(context.Context, *ServeRequest) (*ProgramResponse, error)
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	Stop(context.Context, *StopRequest) (*emptypb.Empty, error)
	Restart(context.Context, *RestartRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Logs(*LogRequest, Wacker_LogsServer) error
	mustEmbedUnimplementedWackerServer()
}

// UnimplementedWackerServer must be embedded to have forward compatible implementations.
type UnimplementedWackerServer struct {
}

func (UnimplementedWackerServer) Run(context.Context, *RunRequest) (*ProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedWackerServer) Serve(context.Context, *ServeRequest) (*ProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Serve not implemented")
}
func (UnimplementedWackerServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWackerServer) Stop(context.Context, *StopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedWackerServer) Restart(context.Context, *RestartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedWackerServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWackerServer) Logs(*LogRequest, Wacker_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedWackerServer) mustEmbedUnimplementedWackerServer() {}

// UnsafeWackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WackerServer will
// result in compilation errors.
type UnsafeWackerServer interface {
	mustEmbedUnimplementedWackerServer()
}

func RegisterWackerServer(s grpc.ServiceRegistrar, srv WackerServer) {
	s.RegisterService(&Wacker_ServiceDesc, srv)
}

func _Wacker_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_Serve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).Serve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_Serve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).Serve(ctx, req.(*ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wacker_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wacker_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WackerServer).Logs(m, &wackerLogsServer{stream})
}

type Wacker_LogsServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type wackerLogsServer struct {
	grpc.ServerStream
}

func (x *wackerLogsServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Wacker_ServiceDesc is the grpc.ServiceDesc for Wacker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wacker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wacker.Wacker",
	HandlerType: (*WackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Wacker_Run_Handler,
		},
		{
			MethodName: "Serve",
			Handler:    _Wacker_Serve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Wacker_List_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Wacker_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Wacker_Restart_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Wacker_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Wacker_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wacker.proto",
}
